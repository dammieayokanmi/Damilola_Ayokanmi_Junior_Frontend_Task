{"ast":null,"code":"var _jsxFileName = \"/Users/uxxxr/Desktop/projects/me/scandiweb/junior-react-interface/src/components/AllProducts.js\";\nimport React, { Component } from 'react';\nimport { gql } from '@apollo/client';\nimport { ProductCard } from 'src/components/ProductCard';\nimport PropTypes from 'prop-types';\nimport loading from 'src/assets/images/loading.gif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class AllProducts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.props.client.query({\n        query: gql`\n          {\n            category(input: { title: \"${this.state.category}\"}) {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n\n                brand\n              }\n            }\n          }\n        `\n      }).then(response => {\n        this.setState({\n          allProducts: response.data.category.products,\n          isLoading: false\n        });\n      });\n    };\n\n    this.state = {\n      allProducts: [],\n      isLoading: true,\n      category: 'all'\n    };\n  }\n\n  render() {\n    const {\n      props: {\n        activeCurrencyLabel\n      },\n      state: {\n        isLoading,\n        allProducts\n      }\n    } = this;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loading,\n          alt: \"loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"category-title\",\n          children: [this.state.category, \" Products\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products--grid\",\n          children: allProducts.map(product => {\n            return /*#__PURE__*/_jsxDEV(ProductCard, {\n              product: product,\n              activeCurrencyLabel: activeCurrencyLabel\n            }, product.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false);\n  }\n\n}\nAllProducts.propTypes = {\n  activeCurrencyLabel: PropTypes.string\n};\nexport default AllProducts;","map":{"version":3,"names":["React","Component","gql","ProductCard","PropTypes","loading","AllProducts","constructor","props","componentDidMount","client","query","state","category","then","response","setState","allProducts","data","products","isLoading","render","activeCurrencyLabel","map","product","id","propTypes","string"],"sources":["/Users/uxxxr/Desktop/projects/me/scandiweb/junior-react-interface/src/components/AllProducts.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { gql } from '@apollo/client'\nimport { ProductCard } from 'src/components/ProductCard'\nimport PropTypes from 'prop-types'\nimport loading from 'src/assets/images/loading.gif'\n\nexport class AllProducts extends Component {\n  static propTypes = {\n    activeCurrencyLabel: PropTypes.string,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      allProducts: [],\n      isLoading: true,\n      category: 'all',\n    }\n  }\n\n  componentDidMount = () => {\n    this.props.client\n      .query({\n        query: gql`\n          {\n            category(input: { title: \"${this.state.category}\"}) {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n\n                brand\n              }\n            }\n          }\n        `,\n      })\n      .then((response) => {\n        this.setState({ allProducts: response.data.category.products, isLoading: false })\n      })\n  }\n\n  render() {\n    const {\n      props: { activeCurrencyLabel },\n\n      state: { isLoading, allProducts },\n    } = this\n\n    return (\n      <>\n        {isLoading ? (\n          <div className=\"loading\">\n            <img src={loading} alt=\"loading...\" />\n          </div>\n        ) : (\n          <>\n            <h3 className=\"category-title\">{this.state.category} Products</h3>\n            <div className=\"products--grid\">\n              {allProducts.map((product) => {\n                return (\n                  <ProductCard\n                    key={product.id}\n                    product={product}\n                    activeCurrencyLabel={activeCurrencyLabel}\n                  />\n                )\n              })}\n            </div>\n          </>\n        )}\n      </>\n    )\n  }\n}\n\nexport default AllProducts\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;;AAEA,OAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;EAKzCM,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KASnBC,iBATmB,GASC,MAAM;MACxB,KAAKD,KAAL,CAAWE,MAAX,CACGC,KADH,CACS;QACLA,KAAK,EAAET,GAAI;AACnB;AACA,wCAAwC,KAAKU,KAAL,CAAWC,QAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAlCa,CADT,EAqCGC,IArCH,CAqCSC,QAAD,IAAc;QAClB,KAAKC,QAAL,CAAc;UAAEC,WAAW,EAAEF,QAAQ,CAACG,IAAT,CAAcL,QAAd,CAAuBM,QAAtC;UAAgDC,SAAS,EAAE;QAA3D,CAAd;MACD,CAvCH;IAwCD,CAlDkB;;IAEjB,KAAKR,KAAL,GAAa;MACXK,WAAW,EAAE,EADF;MAEXG,SAAS,EAAE,IAFA;MAGXP,QAAQ,EAAE;IAHC,CAAb;EAKD;;EA6CDQ,MAAM,GAAG;IACP,MAAM;MACJb,KAAK,EAAE;QAAEc;MAAF,CADH;MAGJV,KAAK,EAAE;QAAEQ,SAAF;QAAaH;MAAb;IAHH,IAIF,IAJJ;IAMA,oBACE;MAAA,UACGG,SAAS,gBACR;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAK,GAAG,EAAEf,OAAV;UAAmB,GAAG,EAAC;QAAvB;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADQ,gBAKR;QAAA,wBACE;UAAI,SAAS,EAAC,gBAAd;UAAA,WAAgC,KAAKO,KAAL,CAAWC,QAA3C;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC,gBAAf;UAAA,UACGI,WAAW,CAACM,GAAZ,CAAiBC,OAAD,IAAa;YAC5B,oBACE,QAAC,WAAD;cAEE,OAAO,EAAEA,OAFX;cAGE,mBAAmB,EAAEF;YAHvB,GACOE,OAAO,CAACC,EADf;cAAA;cAAA;cAAA;YAAA,QADF;UAOD,CARA;QADH;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;IANJ,iBADF;EAwBD;;AAxFwC;AAA9BnB,W,CACJoB,S,GAAY;EACjBJ,mBAAmB,EAAElB,SAAS,CAACuB;AADd,C;AA0FrB,eAAerB,WAAf"},"metadata":{},"sourceType":"module"}